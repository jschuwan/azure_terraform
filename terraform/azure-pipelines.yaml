pool:
  vmImage: ubuntu-latest

variables:
  SUBSCRIPTION: $(moonjun_subscription)
  # subscription: $(revature_subscription)

stages:
- stage: Terraform
  jobs:
  - job: init
    steps:
    - task: TerraformCLI@0
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        allowTelemetryCollection: true
      displayName: "init"

    - task: TerraformCLI@0
      enabled: true
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        allowTelemetryCollection: true
      displayName: "Validate"

    - task: TerraformCLI@0
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: $(SUBSCRIPTION)
        allowTelemetryCollection: true
      displayName: "Plan"

# Below will probably be changed.
    # - task: TerraformCLI@0
    #   inputs:
    #     command: 'import'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #     environmentServiceName: $(subscription)
    #     allowTelemetryCollection: true
    #     resourceAddress: 'azurerm_resource_group.may24_devops'
    #     resourceId: '/subscriptions/$(sub-id)/resourceGroups/$(rg-name)'
    #   displayName: "Import resource group"

    # - task: TerraformCLI@0
    #   inputs:
    #     command: 'import'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #     environmentServiceName: $(subscription)
    #     allowTelemetryCollection: true
    #     resourceAddress: 'azurerm_kubernetes_cluster.may24_devops_dev'
    #     resourceId: '/subscriptions/$(sub-id)/resourceGroups/$(rg-name)/managedClusters/may24_devops_aks_dev'
    #   displayName: "Import dev cluster"

    # - task: TerraformCLI@0
    #   inputs:
    #     command: 'import'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #     environmentServiceName: $(subscription)
    #     allowTelemetryCollection: true
    #     resourceAddress: 'azurerm_kubernetes_cluster.may24_devops_staging'
    #     resourceId: '/subscriptions/$(sub-id)/resourceGroups/$(rg-name)/managedClusters/may24_devops_aks_staging'
    #   displayName: "Import staging cluster"
# Above will probably be changed.

    - task: TerraformCLI@0
      enabled: false
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: $(SUBSCRIPTION)
        allowTelemetryCollection: true
      displayName: "Apply"
        
# Output kubeconfig details into file
    - script: "terraform output kube_config_dev >> may24_devops_config_dev"
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - script: "terraform output kube_config_staging >> may24_devops_config_staging"
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

# Delete the first and last lines of dev/staging config file
    - script: "sed -i '1d;$d' may24_devops_config_dev"
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'


    - script: "sed -i '1d;$d' may24_devops_config_staging"
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

# Publish the kubeconfig files as artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform/may24_devops_config_dev'
        artifact: 'may24_devops_config_dev'
        publishLocation: 'pipeline'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform/may24_devops_config_staging'
        artifact: 'may24_devops_config_staging'
        publishLocation: 'pipeline'
